// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kafkapixy.proto

package com.csvw.lib;

public interface PartitionMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:PartitionMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The Partition this structure describes
   * </pre>
   *
   * <code>int32 partition = 1;</code>
   * @return The partition.
   */
  int getPartition();

  /**
   * <pre>
   * The node id for the kafka broker currently acting as leader for this partition.
   * If no leader exists because we are in the middle of a leader election this id will be -1.
   * </pre>
   *
   * <code>int32 leader = 2;</code>
   * @return The leader.
   */
  int getLeader();

  /**
   * <pre>
   * The set of alive nodes that currently acts as slaves for the leader for this partition.
   * </pre>
   *
   * <code>repeated int32 replicas = 3;</code>
   * @return A list containing the replicas.
   */
  java.util.List<Integer> getReplicasList();
  /**
   * <pre>
   * The set of alive nodes that currently acts as slaves for the leader for this partition.
   * </pre>
   *
   * <code>repeated int32 replicas = 3;</code>
   * @return The count of replicas.
   */
  int getReplicasCount();
  /**
   * <pre>
   * The set of alive nodes that currently acts as slaves for the leader for this partition.
   * </pre>
   *
   * <code>repeated int32 replicas = 3;</code>
   * @param index The index of the element to return.
   * @return The replicas at the given index.
   */
  int getReplicas(int index);

  /**
   * <pre>
   * The set subset of the replicas that are "caught up" to the leader
   * </pre>
   *
   * <code>repeated int32 isr = 4;</code>
   * @return A list containing the isr.
   */
  java.util.List<Integer> getIsrList();
  /**
   * <pre>
   * The set subset of the replicas that are "caught up" to the leader
   * </pre>
   *
   * <code>repeated int32 isr = 4;</code>
   * @return The count of isr.
   */
  int getIsrCount();
  /**
   * <pre>
   * The set subset of the replicas that are "caught up" to the leader
   * </pre>
   *
   * <code>repeated int32 isr = 4;</code>
   * @param index The index of the element to return.
   * @return The isr at the given index.
   */
  int getIsr(int index);
}
