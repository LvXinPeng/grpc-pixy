// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kafkapixy.proto

package mailgun.kafkapixy;

public interface ConsNAckRqOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ConsNAckRq)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Name of a Kafka cluster to operate on.
   * </pre>
   *
   * <code>string cluster = 1;</code>
   * @return The cluster.
   */
  java.lang.String getCluster();
  /**
   * <pre>
   * Name of a Kafka cluster to operate on.
   * </pre>
   *
   * <code>string cluster = 1;</code>
   * @return The bytes for cluster.
   */
  com.google.protobuf.ByteString
      getClusterBytes();

  /**
   * <pre>
   * Name of a topic to produce to.
   * </pre>
   *
   * <code>string topic = 2;</code>
   * @return The topic.
   */
  java.lang.String getTopic();
  /**
   * <pre>
   * Name of a topic to produce to.
   * </pre>
   *
   * <code>string topic = 2;</code>
   * @return The bytes for topic.
   */
  com.google.protobuf.ByteString
      getTopicBytes();

  /**
   * <pre>
   * Name of a consumer group.
   * </pre>
   *
   * <code>string group = 3;</code>
   * @return The group.
   */
  java.lang.String getGroup();
  /**
   * <pre>
   * Name of a consumer group.
   * </pre>
   *
   * <code>string group = 3;</code>
   * @return The bytes for group.
   */
  com.google.protobuf.ByteString
      getGroupBytes();

  /**
   * <pre>
   * If true then no message is acknowledged by the request.
   * </pre>
   *
   * <code>bool no_ack = 4;</code>
   * @return The noAck.
   */
  boolean getNoAck();

  /**
   * <pre>
   * If true and no_ack is false then the message returned by the requests is
   * automatically acknowledged by Kafka-Pixy before the request completes.
   * </pre>
   *
   * <code>bool auto_ack = 5;</code>
   * @return The autoAck.
   */
  boolean getAutoAck();

  /**
   * <pre>
   * If both no_ack and auto_ack are false (by default), then ack_partition
   * and ack_offset along with cluster-group-topic determine the message that
   * should be acknowledged by the request.
   * </pre>
   *
   * <code>int32 ack_partition = 6;</code>
   * @return The ackPartition.
   */
  int getAckPartition();

  /**
   * <code>int64 ack_offset = 7;</code>
   * @return The ackOffset.
   */
  long getAckOffset();
}
